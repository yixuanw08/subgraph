// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get _from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get _owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class UpdateMiningParameters extends ethereum.Event {
  get params(): UpdateMiningParameters__Params {
    return new UpdateMiningParameters__Params(this);
  }
}

export class UpdateMiningParameters__Params {
  _event: UpdateMiningParameters;

  constructor(event: UpdateMiningParameters) {
    this._event = event;
  }

  get time(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get rate(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get supply(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class SetMinter extends ethereum.Event {
  get params(): SetMinter__Params {
    return new SetMinter__Params(this);
  }
}

export class SetMinter__Params {
  _event: SetMinter;

  constructor(event: SetMinter) {
    this._event = event;
  }

  get minter(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class SetAdmin extends ethereum.Event {
  get params(): SetAdmin__Params {
    return new SetAdmin__Params(this);
  }
}

export class SetAdmin__Params {
  _event: SetAdmin;

  constructor(event: SetAdmin) {
    this._event = event;
  }

  get admin(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class USDT extends ethereum.SmartContract {
  static bind(address: Address): USDT {
    return new USDT("USDT", address);
  }

  start_epoch_time_write(): BigInt {
    let result = super.call(
      "start_epoch_time_write",
      "start_epoch_time_write():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_start_epoch_time_write(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "start_epoch_time_write",
      "start_epoch_time_write():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  future_epoch_time_write(): BigInt {
    let result = super.call(
      "future_epoch_time_write",
      "future_epoch_time_write():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_future_epoch_time_write(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "future_epoch_time_write",
      "future_epoch_time_write():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  available_supply(): BigInt {
    let result = super.call(
      "available_supply",
      "available_supply():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_available_supply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "available_supply",
      "available_supply():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  mintable_in_timeframe(start: BigInt, end: BigInt): BigInt {
    let result = super.call(
      "mintable_in_timeframe",
      "mintable_in_timeframe(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(start),
        ethereum.Value.fromUnsignedBigInt(end)
      ]
    );

    return result[0].toBigInt();
  }

  try_mintable_in_timeframe(
    start: BigInt,
    end: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "mintable_in_timeframe",
      "mintable_in_timeframe(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(start),
        ethereum.Value.fromUnsignedBigInt(end)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  allowance(_owner: Address, _spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(_owner), ethereum.Value.fromAddress(_spender)]
    );

    return result[0].toBigInt();
  }

  try_allowance(
    _owner: Address,
    _spender: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(_owner), ethereum.Value.fromAddress(_spender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(_to: Address, _value: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(_to),
      ethereum.Value.fromUnsignedBigInt(_value)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(_to: Address, _value: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(_to),
      ethereum.Value.fromUnsignedBigInt(_value)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(_from: Address, _to: Address, _value: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_from),
        ethereum.Value.fromAddress(_to),
        ethereum.Value.fromUnsignedBigInt(_value)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    _from: Address,
    _to: Address,
    _value: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_from),
        ethereum.Value.fromAddress(_to),
        ethereum.Value.fromUnsignedBigInt(_value)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  approve(_spender: Address, _value: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(_spender),
      ethereum.Value.fromUnsignedBigInt(_value)
    ]);

    return result[0].toBoolean();
  }

  try_approve(_spender: Address, _value: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(_spender),
      ethereum.Value.fromUnsignedBigInt(_value)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  mint(_to: Address, _value: BigInt): boolean {
    let result = super.call("mint", "mint(address,uint256):(bool)", [
      ethereum.Value.fromAddress(_to),
      ethereum.Value.fromUnsignedBigInt(_value)
    ]);

    return result[0].toBoolean();
  }

  try_mint(_to: Address, _value: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("mint", "mint(address,uint256):(bool)", [
      ethereum.Value.fromAddress(_to),
      ethereum.Value.fromUnsignedBigInt(_value)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  burn(_value: BigInt): boolean {
    let result = super.call("burn", "burn(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_value)
    ]);

    return result[0].toBoolean();
  }

  try_burn(_value: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("burn", "burn(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_value)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  decimals(): BigInt {
    let result = super.call("decimals", "decimals():(uint256)", []);

    return result[0].toBigInt();
  }

  try_decimals(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("decimals", "decimals():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOf(arg0: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(arg0)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(arg0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(arg0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minter(): Address {
    let result = super.call("minter", "minter():(address)", []);

    return result[0].toAddress();
  }

  try_minter(): ethereum.CallResult<Address> {
    let result = super.tryCall("minter", "minter():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  admin(): Address {
    let result = super.call("admin", "admin():(address)", []);

    return result[0].toAddress();
  }

  try_admin(): ethereum.CallResult<Address> {
    let result = super.tryCall("admin", "admin():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  mining_epoch(): BigInt {
    let result = super.call("mining_epoch", "mining_epoch():(int128)", []);

    return result[0].toBigInt();
  }

  try_mining_epoch(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("mining_epoch", "mining_epoch():(int128)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  start_epoch_time(): BigInt {
    let result = super.call(
      "start_epoch_time",
      "start_epoch_time():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_start_epoch_time(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "start_epoch_time",
      "start_epoch_time():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rate(): BigInt {
    let result = super.call("rate", "rate():(uint256)", []);

    return result[0].toBigInt();
  }

  try_rate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("rate", "rate():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _symbol(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _decimals(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class Update_mining_parametersCall extends ethereum.Call {
  get inputs(): Update_mining_parametersCall__Inputs {
    return new Update_mining_parametersCall__Inputs(this);
  }

  get outputs(): Update_mining_parametersCall__Outputs {
    return new Update_mining_parametersCall__Outputs(this);
  }
}

export class Update_mining_parametersCall__Inputs {
  _call: Update_mining_parametersCall;

  constructor(call: Update_mining_parametersCall) {
    this._call = call;
  }
}

export class Update_mining_parametersCall__Outputs {
  _call: Update_mining_parametersCall;

  constructor(call: Update_mining_parametersCall) {
    this._call = call;
  }
}

export class Start_epoch_time_writeCall extends ethereum.Call {
  get inputs(): Start_epoch_time_writeCall__Inputs {
    return new Start_epoch_time_writeCall__Inputs(this);
  }

  get outputs(): Start_epoch_time_writeCall__Outputs {
    return new Start_epoch_time_writeCall__Outputs(this);
  }
}

export class Start_epoch_time_writeCall__Inputs {
  _call: Start_epoch_time_writeCall;

  constructor(call: Start_epoch_time_writeCall) {
    this._call = call;
  }
}

export class Start_epoch_time_writeCall__Outputs {
  _call: Start_epoch_time_writeCall;

  constructor(call: Start_epoch_time_writeCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class Future_epoch_time_writeCall extends ethereum.Call {
  get inputs(): Future_epoch_time_writeCall__Inputs {
    return new Future_epoch_time_writeCall__Inputs(this);
  }

  get outputs(): Future_epoch_time_writeCall__Outputs {
    return new Future_epoch_time_writeCall__Outputs(this);
  }
}

export class Future_epoch_time_writeCall__Inputs {
  _call: Future_epoch_time_writeCall;

  constructor(call: Future_epoch_time_writeCall) {
    this._call = call;
  }
}

export class Future_epoch_time_writeCall__Outputs {
  _call: Future_epoch_time_writeCall;

  constructor(call: Future_epoch_time_writeCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class Set_minterCall extends ethereum.Call {
  get inputs(): Set_minterCall__Inputs {
    return new Set_minterCall__Inputs(this);
  }

  get outputs(): Set_minterCall__Outputs {
    return new Set_minterCall__Outputs(this);
  }
}

export class Set_minterCall__Inputs {
  _call: Set_minterCall;

  constructor(call: Set_minterCall) {
    this._call = call;
  }

  get _minter(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class Set_minterCall__Outputs {
  _call: Set_minterCall;

  constructor(call: Set_minterCall) {
    this._call = call;
  }
}

export class Set_adminCall extends ethereum.Call {
  get inputs(): Set_adminCall__Inputs {
    return new Set_adminCall__Inputs(this);
  }

  get outputs(): Set_adminCall__Outputs {
    return new Set_adminCall__Outputs(this);
  }
}

export class Set_adminCall__Inputs {
  _call: Set_adminCall;

  constructor(call: Set_adminCall) {
    this._call = call;
  }

  get _admin(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class Set_adminCall__Outputs {
  _call: Set_adminCall;

  constructor(call: Set_adminCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get _from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _value(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get _spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class BurnCall extends ethereum.Call {
  get inputs(): BurnCall__Inputs {
    return new BurnCall__Inputs(this);
  }

  get outputs(): BurnCall__Outputs {
    return new BurnCall__Outputs(this);
  }
}

export class BurnCall__Inputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get _value(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BurnCall__Outputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class Set_nameCall extends ethereum.Call {
  get inputs(): Set_nameCall__Inputs {
    return new Set_nameCall__Inputs(this);
  }

  get outputs(): Set_nameCall__Outputs {
    return new Set_nameCall__Outputs(this);
  }
}

export class Set_nameCall__Inputs {
  _call: Set_nameCall;

  constructor(call: Set_nameCall) {
    this._call = call;
  }

  get _name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _symbol(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class Set_nameCall__Outputs {
  _call: Set_nameCall;

  constructor(call: Set_nameCall) {
    this._call = call;
  }
}
